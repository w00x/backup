#!/bin/ruby

require 'yaml'
require 'net/ssh'
#require './redis_prod_to_dev'

def generate_external_backup(host,user,dbname,dbuser,dbpassword, dbhost,filename, redis_option)
  puts "Conectando con el servidor #{host}"
  Net::SSH.start(host, user) do |ssh|
    puts "Generando dump"
    ssh.exec("mysqldump -h#{dbhost}  -u#{dbuser} -p#{dbpassword} #{dbname} | gzip > /tmp/#{filename}")
    ssh.exec("redis-cli SAVE") if redis_option
    puts "Archivo generado satisfactoriamente: /tmp/#{filename}"
    puts "Desconectando"
  end
end

def download_external_backup(user,host,filename,redis_option, filename_redis)
  puts "Copiando archivo del host remoto"
  system("scp #{user}@#{host}:/tmp/#{filename} /tmp/#{filename}")
  system("scp #{user}@#{host}:/var/lib/redis/dump.rdb /tmp/#{filename_redis}") if redis_option
  puts "Archivo copiado satisfactoriamente: /tmp/#{filename}"
end

def delete_external_backup(host,user,filename)
  puts "Conectando con el servidor #{host} para eliminar backup remoto"
  Net::SSH.start(host, user) do |ssh|
    puts "Eliminando backup remoto"
    ssh.exec("rm /tmp/#{filename}")
    puts "Backup eliminado satisfactoriamente: /tmp/#{filename}"
    puts "Desconectando"
  end
end

def apply_backup(local_dbuser, local_dbname, local_dbpassword, filename, filename_redis, redis_option, redis_origin, redis_destination)
  puts "Aplicando backup #{filename} en #{local_dbname}"
  system("mysqladmin -u#{local_dbuser} -p#{local_dbpassword} -f drop #{local_dbname} --protocol=TCP")
  system("mysqladmin -u#{local_dbuser} -p#{local_dbpassword} create #{local_dbname} --protocol=TCP")
  system("gzip -d < /tmp/#{filename} | mysql -u#{local_dbuser} -p#{local_dbpassword} #{local_dbname} --protocol=TCP")
  if redis_option
    system("sudo service redis-server stop")
    system("sudo cp /tmp/#{filename_redis} /var/lib/redis/dump.rdb")
    system("sudo service redis-server start")
    backup_redis redis_origin, redis_destination
  end
  puts "Backup cargada satisfactoriamente"
end

if(File.exist?('./config.yml'))
  con = YAML.load(File.read('./config.yml'))

  if(ARGV.size == 2)
    if con.key?(ARGV[0]) && con[ARGV[0]].key?(ARGV[1])
      user = con[ARGV[0]]['user']
      host = con[ARGV[0]]['host']
      config = con[ARGV[0]][ARGV[1]]
      dbhost = con[ARGV[0]]['dbhost']

      filename = 'dump_'+config['dbname']+'_'+Time.now.strftime('%d%m%Y%H%M%S%L')+".sql.gz"
      filename_redis = 'dump_redis'+config['dbname']+'_'+Time.now.strftime('%d%m%Y%H%M%S%L')+".rdb"
      redis_option = config['redis_env'].nil? ? false : true

      generate_external_backup(host,user,config['dbname'],config['dbuser'],config['dbpassword'], dbhost,filename,redis_option)
      download_external_backup(user,host,filename, redis_option, filename_redis)
      delete_external_backup(host,user,filename)
    else
      puts "No se encontraron los parametros en la configuración"
    end
  elsif(ARGV.size == 3 && ARGV[2] == 'apply')
    if con.key?(ARGV[0]) && con[ARGV[0]].key?(ARGV[1])
      user = con[ARGV[0]]['user']
      host = con[ARGV[0]]['host']
      config = con[ARGV[0]][ARGV[1]]
      dbhost = con[ARGV[0]]['dbhost']

      filename = 'dump_'+config['dbname']+'_'+Time.now.strftime('%d%m%Y%H%M%S%L')+".sql.gz"
      filename_redis = 'dump_redis'+config['dbname']+'_'+Time.now.strftime('%d%m%Y%H%M%S%L')+".rdb"
      redis_option = config['redis_env'].nil? ? false : true

      generate_external_backup(host,user,config['dbname'],config['dbuser'],config['dbpassword'], dbhost,filename,redis_option)
      download_external_backup(user,host,filename, redis_option, filename_redis)
      delete_external_backup(host,user,filename)
      apply_backup(config['local_dbuser'], config['local_dbname'], config['local_dbpassword'], filename,
            filename_redis, redis_option, config['redis_env'], config['local_redis_env'])
    else
      puts "No se encontraron los parametros en la configuración"
    end
  else
    puts "Faltan parametros"
    puts "./backup [instance] [environment] (apply)"
  end
else
  puts "Falta archivo de configuracion, verifica que el archivo config.yml exista, de lo contrario renombra el archivo _config.yml"
end
